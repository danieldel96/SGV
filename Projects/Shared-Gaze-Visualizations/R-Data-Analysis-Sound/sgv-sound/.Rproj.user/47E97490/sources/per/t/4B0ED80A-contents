---
title: "sgv-sound"
output: html_document
date: "2025-04-29"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

## R Markdown

```{r sgv-sound}
library(ARTool)
library(emmeans)
library(dplyr)
library(tidyr)

# Load your data
data <- read.csv("data/quals_postcond.csv")

data <- data %>%
  filter(Q2 %in% c(1, 2, 3))  # Removes any rows where Q2 is 0 or other unexpected values

# Ensure factors are correctly set
data$participant_id <- factor(data$Q1)
data$sound <- factor(data$sound)
data$visualization <- factor(data$Q2)

# List of question columns
questions <- paste0("Q3_", 1:11)

# Loop through each question
for (q in questions) {
  cat("\n========================\n")
  cat("Analyzing", q, "\n")
  cat("========================\n")
  
  # Dynamically build the formula
  formula <- as.formula(paste(q, "~ sound * visualization + (1|participant_id)"))
  
  # Fit ART model
  model <- art(formula, data = data)
  
  # Print ANOVA table
  print(anova(model))
  
  # Post-hoc: pairwise comparisons for sound Ã— visualization combinations
  posthoc <- emmeans(artlm(model, "sound:visualization"), pairwise ~ sound * visualization)
  print(posthoc)
}
```


```{r summary stats}

# Drop unused levels (important!)
data$sound <- droplevels(factor(data$sound))
data$visualization <- droplevels(factor(data$Q2))  # assuming Q2 is the visualization factor

data <- data %>%
  filter(Q2 %in% c(1, 2, 3))  # Removes any rows where Q2 is 0 or other unexpected values

# Now convert and recode
data$visualization <- factor(data$Q2)
data$visualization <- recode_factor(data$visualization,
                                    `1` = "Ray",
                                    `2` = "Hover",
                                    `3` = "Outline")

# Reshape from wide to long for Q3_1 to Q3_11
long_data <- data %>%
  pivot_longer(cols = starts_with("Q3_"), names_to = "question", values_to = "value")

# Compute mean and SD grouped by sound, visualization, and question
summary_stats <- long_data %>%
  group_by(sound, visualization, question) %>%
  summarise(
    mean = round(mean(value, na.rm = TRUE), 2),
    sd = round(sd(value, na.rm = TRUE), 2),
    n = n(),
    .groups = "drop"
  )

# Print full table
print(summary_stats, n = Inf)
```

